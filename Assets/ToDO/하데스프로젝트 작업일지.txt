하데스프로젝트 : 하데스 게임에서 영감 받아 연습 겸 만드는 프로젝트 입니다 11/7일 시작

11/7 : 기초적인 캐릭터의 기반만 다져놓았습니다. 

1. 기반Class는 2개(Warrior,Magician으로 나뉨) 기반 클래스는 인터페이스(IPlayer)만 상속받는 추상 클래스 => 모노비헤비어의 상속을 벗어나 조금 더 유연성을 주기 위함

2. 자식 클래스에서 조금 더 구체적인 기능 작성 후 게임 시작시 선택 후 이니셜라이저를 초기화 할 예정(현잰 임시로 워리어 데이터로...)

3. 이니셜라이저를 싱글턴을 통해 초기화 된 데이터로 실제 유니티 라이프 사이클로 로직 실행 예정 (현재는 무브 컴포넌트만 존재)


 11/8 : 몬스터 생성(맵에 따른 생성 변화) 및 공격 / 캐릭터 애니메이션(무기에 따른 애니메이션 변화)의 기능 기반 다져놓았습니다.

1. 게임 진행은 랜덤한 맵으로 갈 예정(맵의 컨셉에 따라 팩토리 패턴을 통해 몬스터 스폰 예정 현재 기반클래스와 테스트클래스 만들어둠)

2. 캐릭터는 던전 입장 전에 무기를 고르고 그 무기를 쭉 성장시키며 던전을 돌 예정(현재 게엠이니셜라이저로 정보를 뿌리며 공격베이스 클래스와 유니티 싸이클을 돌릴 플레이어 어택,
IWeapon을 상속받는 IWeapon 그리고 무기별 애니메이션 오버라이딩, 테스트용으로 버튼에 두손검을 장착하는 시스템 까지 구축 완료)


11/9 : 애니메이션에 꽂혀 애니메이션 콤보를 다져둠.

1. 이제 콤보공격과 콤보에 맞는 데미지 리턴 가능. 앞으로 무기마다 잡아줄 예정 현재 콜라이더로 데미지를 주는 형식이라 제어가 좀 필요함

11/12 : 현재 다른 Refactoring 프로젝트를 하나 복사해 만들어서 거기서 작업중. 조금더 유연성과 확장성 갖기 위해 캐릭터의 무기별 애니메이터는 오버라이딩이 아닌 아예 바꾸기로.

데미지 구조는 IDamageable을 추가해 몬스터 캐릭터에 상속 시켜 이거로 TakeDamage호출 

1. 진행도 : 몬스터와 캐릭터 간 서로 타격,피격 가능 캐릭터는 시작시 맨손 > 던전 입장시 무기선택 > 해당에 맞는 무기애니메이션과 무기 데미지, 무기장착 (현잰 대검으로 테스트) 
	  무기별 IWeapon과 WeaponBase를 기반으로 대검 = GreatSword로 이들을 상속해 받는중

2. 다음은 대검의 특수성을 GreatSword 스크립트에서 구성 할 예정 (현재는 대검을 들면 분노게이지 및 타격 몬스터에게 슬로우나 디버프를 줄 예정)

11/12~18 : 리팩토링(진행중) csv,json으로 파일 작성 및 로드 완료

11/19 : 무기 관련 리팩토링 진행중 - 기존 구조(BaseWeapon의 결합도가 높고 인터페이스의 불필요성이 있었음)을 변경해 WeaponManager를 기반으로 무기별 특성을 인터페이스로 살리기,
		                   - 무기의 데이터 저장 및 로드는 CSV로 진행(인게임에서 변하기는 하나 복잡한 구조가 아님)

11/20 :	차징 공격(우클릭) 구현

  코드 구조 개선 및 제작- IPlayerClass가 보니 몬스터와 겹치는 부분이 많아 ICreature로 변경 후 재할당
		      - CharacterAttackBase의 애니메이터를 animationController작성 후 대체 ( 향후 애니메이션 로직이 추가 될 가능성을 감안 )
		      - WeponChargeBase제작 (차징공격 기반 추상클래스, MonoBehaviour상속X 생성자로 해당 무기에 생성) WeaponManager의 데이터값들을 사용
	                  - 프레임워크용 GreatSword의 Charge클래스 생성(WeponChargeBase상속) 후 PerformChargeAttack override(대검만의 차지공격 구현)
	                  - WeaponManager에 IsChargeAttack 추가 (기본공격,강공격 구분용) 
                              - WeaponBase에 OnChargeAttackEnd(IsChargeAttack를 false시켜주는 애니메이션 이벤트)매서드 추가
                              - MeleeWeaponHandler의 GetDamage매서드에 차징어택시 다른 계산식 추가
		

11/21 : 히트스탑 구현, AttackData 추가 (어택의 타입을 정하기 위해)
	1 히트시 피격오브젝트의 움직임도 추가 단. 히트박스는 그대로일것< 애매
	2 땅을 기준으로 수평으로 이동할 것
	3 움직임의 크기는 점차 줄어들기
	4 일반공격과 차징공격 그리고 스킬상태의 공격마다 흔들림이 다를것
	5 해당 게임은 플레이어와 카메라의 거리가 어느정도 있기 때문에 카메라도 조금은 같이 흔들릴것


11/22 : 스페셜어택 구현, SpecialAttackBase 추가 (무기의 스페셜어택 컴포넌트)
	1 생성자, 실행, 파티클,사운드, 추상 매서드로 구현효과로 구성
	2 이를 상속받아 GreatSwordSpecialAttack 구현 
	3 대검은 버프로 버프증가 및 각종 데이터는 따로 스크립터블 만들어 Addresable로 할당 및 구현
	4 스킬을 한번 쓰면 로드한 메모리를 유지하며 파티클은 온오프로 관리, 이후 던전 관리 시스템시 종료때 릴리즈 예정
	 


11/24 : UIManager생성 및 PlayerClass의 스탯변수들을 Stats로 나누어 관리
	1 Stats는 플레이어의 스탯변수들을 프로퍼티로 만들어둠
	2 플레이어클래스는 이를 생성자로 받으며 해당 매개변수에 스크립터블의 변수 할당
	3 UI매니저는 이벤트기반으로 변동시 자동으로 바뀌게, 모든 변동UI는 여기서 관리


11/25 : 흩어져있던 무기 할당 및 생성 로직을 WeaponFactory와 WeaponService 스크립트를 만들어 합침,캐릭터어택베이스 리팩토링
	1 WeaponFactory는 딕셔너리로 웨폰의 이름과 컴포넌트 타입으로 관리함. 즉 무기 타입 관리 및 생성을 책임
	2 WeaponService는 선택한 무기의 관리, 이벤트 관련 처리를 책임
	3 CharacterAttackBase의 애니메이션 관련 스트링을 static readonly와 Animator.StringToHash()를 이용해 변환 후 사용
	(성능 최적화 - 한번 변환 후 사용 스트링보다 인트가 효율적, 오타 방지)

	
11/26 : 스크립터블에 무기별 게이지 색상 변수 추가, 차징게이지도 이벤트화 하여 유아이매니저에서 관리(발생은 일단 CharacterAttackBase에서 )
	1 주석 및 리전으로 스크립트 청소(PlayerClass와 WeaponManager만 진행)

11/27~ : 맵 에셋 구매 및 손맵 제작 진행중 (1-1~1-10까지 예정)

12/10 : 손맵 제작 후 펜스(이동제한 콜라이더)생성 툴 제작 - Scene에 클릭(기즈모로 표현)으로 좌표들을 이어 펜스 제작

12/19 : 제작 완료

12/20 ~ : 몬스터AI 제작중 - 현재 State패턴과 전략 패턴 그리고 BTree를 통해 몬스터들의 AI를 관리 할 예정

12/23 : 각종 전략들 생성, 현재 Basic류만 있으며 이후 특별한 케이스들도 따로 만들 수 있게 외부에서 주입. (CSV와 팩토리스크립트로 외부에서 주입)

----------------------------------------------------------------------------------------------------------------

최근 1달반

몬스터 4종류와 중간보스 1마리 제작 완료

Attack은 Basic과 Jumpt를 Skill류엔 비행체 - 직선 및 포물선 이동 그리고 폭발 효과(공간장악스킬) 제작

먼저 MonsterAI와 각종 전략 및 패턴에 적용된 MonsterClass를 인터페이스 화로 변경 > 전략 및 패턴을 보스에서도 재활용 하기 위함.

보스만의 전략 및 상태(페이즈변환,기믹,패턴(공격전략 합치기 및 미니게임), 멀티공격전략(공격전략들을 넣고 가중치에 따라 공격전략선택))류 제작

작업 함에 있어 생각보다 버그가 많이 발생하여 2월초중반에 고침. 보통의 경우 페이즈 변환시 CanAttack 등 초기화의 문제였음. (문제해결일지에 작성)


2/12 - 기존에 만들어둔 BossUI와 종유석 기믹 비쥬얼 업데이트 - BossUI는 임시, 종유석은 Particle간단히 제작(먼지와 잔돌 떨어지는 느낌) 및 역동성을 위해 흔들림 추가(Sin사용)

다음 할일 - 1챕터의 중간 보스 제작 완료 및 이제 나머지 몬스터 제작 예정 - 이때 또 다른 어택전략과 스킬도 제작 예정

문제점 - 떨어지는 종유석이 역동성이 여전히 떨어지게 느껴짐, BossUI의 디자인이 전체적으로 에셋없는 부분이 많아 부족함이 느껴짐



2/15 - BossUI에서 Gimmick관련 UI 개선 => 던전앤파이터 패턴 UI 착안


2/16 - MultiShot스킬전략 제작 => 애니메이션 이벤트에 OnSkillEffect를 원하는 타이밍에 발사하게끔 가능

	일반몬스터 제작 매뉴얼, 스킬제작매뉴얼, 전략 및 각종 Type들 단어 정리 완료

	1-6 몬스터 Ray 제작 (basic공격,multi스킬)

	다음 할일 - 1-9까지의 몬스터 제작 (약 2마리 정도) 후 1챕터의 보스 제작

2/17 - Ray, Warm(ID 6,7번) 몬스터 제작
	
	현재 투사체들이 날라갈때 좀 심심해 보여서 트레일렌더러 제작중. 추후 종유석기믹 등에 합쳐볼 예정


2/18 - Rat(ID 8번) 몬스터 제작 및 나선형 트레일렌더러 제작 완료 종유석 및 비행체에 결합 완료

	기존에 attakstate이후 여전히 공격범위 안이지만 간혈적으로 무브가 되는 현상 수정 => IDlestate와 Btree간 변환 충돌이 있었음. state는 상태효과에만 집중하도록 변경 및 애니메이션 트리거 변수가 잘못된거 수정 => Warm에서 한번 꼬임

	기존 attackstate에서 기존에 보스만들 때 문제였던 Excute부분을 지워 공격상태에서 나오지 못하는 상황 => Excute에 이즈어택킹이 끝났다면 Movestate로 변경
	
	다음 할일 - 1챕터 보스 제작 -

2/19~21 - Chapter1 보스 Alexander 기획 중간 완료 / 각 챕터 보스들만의 스크립터블과 데이터들 CSV제작 예정 

	현재 1챕터보스만 AlexanderBossData 스크립터블과 csv 제작 완료 Essence게이지 UI및 madness게이지 스크립트 작성/BossMonster를 상속하는 AlexanderBoss 제작 >> 에센스 증가 및 감소 그리고 효과를 위해 

	1-10 맵자체에 CanvasUI와 EssenceUIManager까지 넣어둔 상태. << 이부분은 차후 어떤식으로 관리 및 확장할지 고민중

	기존 BossFactory에 생성자에 bossId넣는 부분을 CrabBossFactory, AlexanderFactory로 분리 따로 관리 던전매니저도 열거형 수정 및 추가

	생성 생성 후 1-10 BossEssenceUI 연동 확인
	
	Y를 누르면 10증가 T누르면 10감소 테스트 완료

	Commit = Alexander/EssenceUI


2/22 - 1챕터 Essence 효과 - 70%도달시 플레이어 공격력30%상승 but 받피뎀 20%증가, 100%도달시 2초간 경직 후 게이지0초기화 구현 완료

	PlayerClass에 IsStuned bool타입과 AplyStun 매서드 작성 (Dotween 활용)

	PlayerMoveMent와 PlayerAttack에 해당 변수를 추적 후 스턴시엔 조작 불가능하게 수정 완료

	현재 움직임중 100퍼도달시 살짝 미끌어지며 앞으로가는데 수정하지 않고 뭔가 자연스러워서 보류

	광기게이지용 VignetteEffect Shader 제작 (화면가장자리에 붉은색 띠가 흐르는듯한 느낌) 
	
	게이지가 트리거만큼 차면 발동 현재 두근거리는 소리도 넣을지 고민중

	Commit = Alexander/EssenceUI/VignetteEffectShader


2/23 - 70%시 두근거림 추가

	영혼석 (광기게이지 감소 시켜주는 기능) 제작

	각각 영혼석은 미리 맵에 배치해두고 스크립트를 넣어 둔 뒤 보스가 소환될때(Factory) Find로 보스의 에센스시스템을 초기화 시켜주는 구조

	현재 WorldSpace로 플레이어에게 F가 상호작용 키임을 알려주는중. 또한 가까이가면 색이 변하는등 사용가능함을 인지 상호작용은 F를 꾹누르면 Bar가 차면서 시각적으로 확인 가능

	ComboAttackStrategy 전략 제작 완료 => 애니메이션에 의존(서브머신을 만들고 이어붙임 시작과 끝에 베이직과 같이 enable,disable 이벤트 주입)

	ChargeAttackStrategy 전략 제작 진행중 => 기존 ICreatureData에 차지공격전략에 필요한 데이터 추가 => 이부분은 몬스터클래스에 옮기지 않고 그냥 데이터에서 바로 뽑아 사용
		
		현재 보스에 전략 주입까지 해뒀고 플레이어나 월간 기초적인 상호작용까진 완료
	
	 개선 => 현재 공격상태에 오자마자 바로 슝 시작하기에 느낌이 없음. 뭔가 발을 구른다던지 사전시간이 필요함. 이때 기믹에서 이용한 Indicator를 확장 예정

		  => 기존껀 원형모양만 가능하기에 Squre버전 제작 예정. 참고자료 던파 진룡 이트레녹의 돌진기술 => 추후 이게 카운터 미니게임해금으로 발전 가능성 염두


2/24 - ChargingIndicator 제작 완료 제작중에 크기커질때 아웃라인도 커짐 확인 Shader수정 기존Indicator도 바꿔야할듯함 

	개선 => 현재 두께가 좀 얇고 뭔가 밋밋함 두께는 좀더 넓히고 추후 이펙트 넣고 생각


	ChargeAttackStrategy전략에서 이벤트를 만들어 사전준비에서 차징공격으로 넘어갈때 인보크 시켜 애니메이션트리거를 발동 >> 현재 AttackState에선 보스에만 적용중 몬스터도 수정해야함

	Enum으로 차징어택의 순서 정리

	애니메이션 구조는 Prepare > Charging > Idle순으로 가며 스탑어택에서 Complete하고있는데 수정 여지 있음 > 이벤트를 한번더 호출? 구독해제는 죽을때 해줘야할듯함
	
	개선 =>  이펙트가 더 있어야 좀더 맛있는 공격이 될 것 같음
			Ex) 벽에 부딪힐땐 어떤이팩트, 사람은 어떤이팩트, 카메라쉐이크, 달리기 시작할때도 이팩트(DashEffec)

	개선 완료 


차지 공격 정리:	보스가 플레이어를 향해 준비 자세를 취하며 인디케이터가 나타남 (시각적 경고)

				준비 시간이 지나면 보스가 플레이어 방향으로 빠르게 돌진

				벽이나 플레이어와 충돌 시 적절한 이펙트와 피해를 주며 공격 종료

	차지 공격 제작 매뉴얼

데이터 설정

CSV에 필요한 필드 추가: 차지 속도, 지속 시간, 준비 시간
이펙트 프리팹 Addressables 키 설정: 인디케이터, 먼지, 시작, 트레일, 충돌 이펙트


인디케이터 준비

쿼드 메시 생성 및 경고 쉐이더 적용
채움 효과 및 아웃라인 설정


전략 연결

ChargeAttackStrategy를 BossMultiAttackStrategy에 추가
필요한 이벤트 구독 설정


애니메이션 설정

"ChargePrepare"와 "Attack_Charge" 트리거 추가
상태 전환 이벤트 연결


동작 확인

준비 단계에서 플레이어 추적 및 인디케이터 표시
차지 실행 시 적절한 이펙트와 이동
충돌 처리 및 상태 전환 확인

Commit = Alexander/AttackStrategy/Charge


2/25 기존 스킬들은 한몬스터당 하나의 스킬만 가질수 있는 구조임. 이를 해결 할 방법을 몰색함

	 스킬컨피그를 제작하여 BossMuttiSkillStrategy 컨테이너 생성 후 완성된 스킬을 ID값으로 관리하려 시도 [ex) 현재 스킬구조가 스킬전략,이펙트,임팩트,무브먼트,버프종류가 있음
	 
	 이를 Config로 합쳐서 ID값을 부여하고 각 전략들을 합쳐서 하나의 스킬을 완성 => 다양한 조합이 가능해짐]
	 
	 => 작업 중간에 에디터 실행시 멈추는 에러발생 => 찾다가 좀 헤맸던 부분들이많았음

	 => 하루만 작업했기에 전날 커밋으로 돌아가서 기존 방법을 좀더 개선해서 하기로 결정

	 => Alexander/AttackStrategy/Charge버전으로 돌아감


2/26 전날 작업을 다시 시작. 

구조 -	SkillConfig 스크립트 제작 => 스킬타입 데이터 주입용

		SkillConfigManager SkillConfig에 맞는 데이터를 CSV에서 가져와 주입해줌 

		BossDataManager에선 PhaseData.CSV 에 ID값과 가중치를 작성된 값을 스크립터블에 로드 => BossMonster에 phase이니셔라이즈에 추가(가중치도 해줘야함) => BossAI에서 BossMultiSkill생성자로 생성

		=> 로드된 Id값을 통해 BossMultiSkill스크립트의 AddSkillStrategyFromConfig매서드를 통해 Id값으로 생성되어있는 스킬을 주입해줌

		이 과정에 있어서 기존에 BossMonster에서 CurrentPhase값이 1이고 시작시에 기믹데이터와 페이즈데이터에 CurrentPhase-1이 아닌 그대로 사용 했는데 문제없이되었던 문제를 해결함

		BossDatamanager에서 데이터들으 2번 Add했었음 => 시작하자마자 CurrentPhase값(1)을 그대로 받아와도 이상이 없던 이유.

		수정 후 스킬들이 들어오는것까지 확인함

		다음날 할것 => 좀더 테스트를 해봐야함. 먼저 가중치데이터도 BossMonster에 일단 추가해줄수있도록함 또한 페이즈 변환할때 잘 되는지도 체크 => 트랜지션전략에 추가해야함

Commit = Alenxader/SkillConfig/ing
		
		
2/27 - 스킬전략시스템 리팩토링 개선 => 현재 알고보니 스킬전략의 skillEffect전략(여기서 무브나 각종 전략도 추가됨)이 전략공장에서 스크립터블데이터 통해 주입됨.

		따라서 SkillStrategyFactory를 새로 만들어 BossMultiSkillStrategy에서 스킬 생성 로직을 분리하여 새로운 팩토리 클래스로 이동

		여기서 이미 구성된 스킬 ID값을 통해 스킬 전략을 생성하는 책임 부여

		BossMultiSkillStrategy: 스킬 전략 컨테이너 역할(관리, 선택, 실행)에 집중

		SkillStrategyFactory: 스킬 ID로부터 스킬 전략 객체 생성 담당 => StrategyFactory의 매서드와 config에 담긴 타입들 이용함

		StrategyFactory: 개별 전략 컴포넌트 생성 담당

Commit = SkillStrategyRefactorin/SkillStrategyFactory

2/28 = 전날 리팩토링에서 추가적으로 Boss별 skillConfigid마다 다른 프리팹 사용을 위한 개선 (ex) bossid : 1 configid : 1 prefabkey : A , bossid : 1 configid : 2 prefabkey : b)

	흐름 - BossPrefabs.csv에 SkillConfigID 추가 CSV 파일에서 데이터 로드 → BossDataManager의 딕셔너리에 저장
		   bossSkillPrefabMap이라는 이중 딕셔너리
		   키1: 보스ID, 키2: 스킬컨피그ID, 값: 프리팹 GameObject
	
		스킬 생성 시 SkillStrategyFactory가 스킬 컨피그ID와 보스 ID를 기반으로 매핑된 프리팹 요청

		BossDataManager가 적절한 프리팹 제공 (없으면 기본 프리팹 반환)

		해당 프리팹으로 ProjectileSkillEffect 생성하여 스킬 구현

		BossDataManager: 데이터 로드, 저장 및 제공
		SkillStrategyFactory: 스킬 생성 및 맞춤형 프리팹 적용
		ProjectileSkillEffect: 실제 스킬 효과 실행

		리팩토링한 스킬전략 시스템 매뉴얼

		다음 진행할 리팩토링 - 스킬에 계수를추가하여 기존 스킬데미지 하나를 이용해 다양한 데미지 구현

Commit = SkillStrategyRefactorin/SkillStrategyFactory/PrefabAdd

3/1 = 스킬계수 추가 완료 => skillConfig에 계수를 추가 csv에도 추가하여 작성 => ISkillEffect를 받은 스크립트(현잰ProjectileEffect)에서 스킬데미지를 관리

	
	기존구조는 스킬데미지를 바로받아서 할당 => 이제 skill전략팩토리에서 제작된 스킬의 계수를 받아 ISkillEffect의 Initialize해줌(기존 Initialize를 유지한채 오버로딩(데미지계수 추가))
	SkillEffect는 실제 스킬의 사실상 모든걸 담당함
	=> 현재 보스만 skillConfig로 스킬을 할당중

	기존 ProjectileParabolicMovement의 이동이 이상했는데, 이유는 skillProjectileSpeed가 높으면 너무 멀리가는게 문제임 => 바꿔야함
	

Commit = Notebook/SKillDamageDamagemutiplerAdd

3/2 = '야수의 울부짖음' 제작중 HowlPrefab 로드하는 과정에서 에디터가 계속 멈췄는데 다른 프리팹으로 하니 이상이 없어짐. 

	일단 당장 스킬발동은 하나 되는게 없는 상태 다음날 고쳐야할듯 함 => 아마 현재 스킬타입이 Basic이라 바로 끝나는거로 예상 타입 추가 예정(HowlStrategy)



3/3 = '야수의 울부짖음' 제작 완료 CSV에서 Prefab로드하는 과정에 특정 행과열에 에러가 났는데 이유는 찾지못함. 다른행으로 이동 후 작성해서 해결

	=> AreaSkillStrategy추가 구조는 스킬발동 시 먼저 Howl이펙트가 나오고 지정한 duration값동안 indicator가 Fill됨. 이후 차면 OnImpact로 효과(현잰 데미지 및 에센스 증가)
	
	=> howlDuration이 애니메이션보다 짧고 Strategy의Update가 프레임별로 안되기에 이벤트호출로 AreaStrategy완료 호출
	
	=> SkillState에서 완료 후 상태에서 나가는게 스킬효과의 충돌떄문인지 제대로 안나가짐
	
		따라서 임시 해결로 애니메이션클립을 가져와 해당 클립의 길이의 조금더를 해서 나가게끔 함

Commit = Main/Alexander/HowlSkillStrategy

3/4 = '야수의 발톱' 제작 중..

	=> BaseProjectile에서 파생되는 GroundExplosionProjectile생성 폭발형 프로젝타일에 할당 할 스크립트임
	=> ISkillEffect의 ProjectileSkillEffect를 받는 CircularProjectileSkillEffect 생성 원형에 데미지를 줄 스킬타입 스크립트

	현재 안밖으로 바뀌는지 테스트 하려했으나, 도넛모양의 인디케이터가 없어 다음날 확인해볼 예정. 일단 데미지가 들어오는거까진 확인함

	Essece게이지가 오르게도 해야함 수정 예정 GroundExplosionProjectile에서 관리할듯 함
		   

3/5 = '야수의 발톱' 제작 완료 및 도넛모양 인디케이터 제작 완료

	=> 이제 ISkillEffect에서 이벤트를 선언해 스킬의 완료를 알리도록 변경
	=> 다음으로는 기믹제작 및 미니게임 패턴(베이직차징공격예상)하면 보스는 어느정도 완성

	=> ★현재 에센스를 증가함에 있어 특정 몬스터클래스의 보스몬스터 스크립트를 갖는데, 이를 보스의 인터페이스나 이쪽으로 빼야할 듯 함★
	=> 에센스 증가는 보스들이 공유해야하기 때문

Commit = Main/Alexander/ClawSkill

3/6 = Alenxander 기믹 제작 및 맵패턴 추가/

	기존 에센스시스템에 IBossWithEssenceSystem추가해서 챕터보스에 추가 => 에센스시스템 사용하는 몬스터 추적 및 기존 시스템에서 게이지가 차게끔 하기위해

	=> 기존 스킬이펙트들중 에센스가 차는 특정 스킬을 위함
	
	맵패턴 추가 기반 다지는중

3/7 = 맵기믹 기반 및 MadnessCrackHazard 완료

	새로 추가된 컴포넌트

	인터페이스: IBossEssenceHazard(보스의 에센스 기반 위험요소를 정의, 위험요소 활성화, 비활성화, 강도 조절 메서드 제공), IBossWithEssenceSystem(에센스 시스템을 가진 보스의 표준 인터페이스 정의)

	매니저 클래스: BossEssenceHazardManager => 모노비헤비어 상속

		위험요소 관리 및 주기적 활성화
		에센스 수치에 따른 발동 빈도와 강도 조절
		플레이어 주변 적절한 위치에 위험요소 생성

	구현 클래스: MadnessCrackHazard

		"광기의 균열" 위험요소 구현체

	흐름 =>	CSV 파일에서 광기 균열 관련 설정 로드
			AlexanderBossData에 설정 적용
			보스 생성 시 IBossEssenceHazard를 상속한 클래스 new 할당 및 BossEssenceHazardManager 초기화
			광기 게이지 70% 이상 시 광기의 균열 맵 패턴 활성화
			균열에 닿은 플레이어에게 데미지 + 보스 광기 게이지 증가


3/8 = SoulEntity와 SoulGimmickStrategy 구현 완료. 

	기존 HazardObject를 상속받아 SoulEntity 기능을 구현하고, IGimmickStrategy 인터페이스 기반으로 SoulGimmickStrategy 클래스를 개발

	다음할일 - 보스 위치 이동 로직 확인 및 시각적 효과 개선(밝은/어두운 형체 구분을 위한 파티클, 이펙트 등 추가) 컷씬..추가하고싶음


3/9 = 밝은/어두운 형체를 구분하기 위한 방법으로 별도 자식 오브젝트 활성화/비활성화 방식 선택 히트임팩트도 같음

	SoulGimmickReward 클래스 설계 기존 HazardGimmickReward와 차별화된 보상 메커니즘 설계

	기믹 성공 시 컷씬 실행 => 씨네머신의 타임라인을 활용 할 예정

	움직임 제약, 컷씬 실행 트리거, 카메라 움직임, 동생의 개입 효과 필요

	=> 컷씬을 만들다보니 구도나 연출 등 오히려 몰입감이 깨지는 듯함 간단히 시네머신의 타임라인 등 사용법 숙지로 만족

3/10 = 보스제작임시완료 => 보스의 드랍아이템 제작 겸 item프레임워크 작업 돌입

3/11 = 인벤토리UI 및 Item프레임워크 기반 다짐 // Branch = Item

	=> Item클래스에 아이템 관련 변수들과 타입을 정리. ItemBase CSV로 아이템 정보들 제작 이를 ItemDataManager를 통해 로드 후 각 타입별로 아이템을 만듦. (현재는 파편,재료,물약으로 구성)

	=> 각 타입별 특수 능력들은 따로 CSV로 빼서 Creat매서드에서 부여

	=> 기존 MonsterData에 존재했던 DropChace와 DropItemID로는 하나의 아이템만 부여가 가능하여 Droptables를 제작

	=> DropTableManager와 ItemDropSystem을 통해 몬스터가 죽을때 드랍테이블로 아이템 스폰을 정함

	=> 이때 등급별 스폰 이펙트를 다르게 함으로써 유저들에게 파밍의 재미를 선사

	=> 기반은 어느정도 다져졌으며 UI 디자인 및 스폰 파티클 크기 조정, 토클 I로 인벤토리 여닫이 등 테스트 예정

Commit = Item/framework



	

	








