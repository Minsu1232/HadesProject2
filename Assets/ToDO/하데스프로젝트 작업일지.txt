하데스프로젝트 : 하데스 게임에서 영감 받아 연습 겸 만드는 프로젝트 입니다 11/7일 시작

11/7 : 기초적인 캐릭터의 기반만 다져놓았습니다. 

1. 기반Class는 2개(Warrior,Magician으로 나뉨) 기반 클래스는 인터페이스(IPlayer)만 상속받는 추상 클래스 => 모노비헤비어의 상속을 벗어나 조금 더 유연성을 주기 위함

2. 자식 클래스에서 조금 더 구체적인 기능 작성 후 게임 시작시 선택 후 이니셜라이저를 초기화 할 예정(현잰 임시로 워리어 데이터로...)

3. 이니셜라이저를 싱글턴을 통해 초기화 된 데이터로 실제 유니티 라이프 사이클로 로직 실행 예정 (현재는 무브 컴포넌트만 존재)


 11/8 : 몬스터 생성(맵에 따른 생성 변화) 및 공격 / 캐릭터 애니메이션(무기에 따른 애니메이션 변화)의 기능 기반 다져놓았습니다.

1. 게임 진행은 랜덤한 맵으로 갈 예정(맵의 컨셉에 따라 팩토리 패턴을 통해 몬스터 스폰 예정 현재 기반클래스와 테스트클래스 만들어둠)

2. 캐릭터는 던전 입장 전에 무기를 고르고 그 무기를 쭉 성장시키며 던전을 돌 예정(현재 게엠이니셜라이저로 정보를 뿌리며 공격베이스 클래스와 유니티 싸이클을 돌릴 플레이어 어택,
IWeapon을 상속받는 IWeapon 그리고 무기별 애니메이션 오버라이딩, 테스트용으로 버튼에 두손검을 장착하는 시스템 까지 구축 완료)


11/9 : 애니메이션에 꽂혀 애니메이션 콤보를 다져둠.

1. 이제 콤보공격과 콤보에 맞는 데미지 리턴 가능. 앞으로 무기마다 잡아줄 예정 현재 콜라이더로 데미지를 주는 형식이라 제어가 좀 필요함

11/12 : 현재 다른 Refactoring 프로젝트를 하나 복사해 만들어서 거기서 작업중. 조금더 유연성과 확장성 갖기 위해 캐릭터의 무기별 애니메이터는 오버라이딩이 아닌 아예 바꾸기로.

데미지 구조는 IDamageable을 추가해 몬스터 캐릭터에 상속 시켜 이거로 TakeDamage호출 

1. 진행도 : 몬스터와 캐릭터 간 서로 타격,피격 가능 캐릭터는 시작시 맨손 > 던전 입장시 무기선택 > 해당에 맞는 무기애니메이션과 무기 데미지, 무기장착 (현잰 대검으로 테스트) 
	  무기별 IWeapon과 WeaponBase를 기반으로 대검 = GreatSword로 이들을 상속해 받는중

2. 다음은 대검의 특수성을 GreatSword 스크립트에서 구성 할 예정 (현재는 대검을 들면 분노게이지 및 타격 몬스터에게 슬로우나 디버프를 줄 예정)

11/12~18 : 리팩토링(진행중) csv,json으로 파일 작성 및 로드 완료

11/19 : 무기 관련 리팩토링 진행중 - 기존 구조(BaseWeapon의 결합도가 높고 인터페이스의 불필요성이 있었음)을 변경해 WeaponManager를 기반으로 무기별 특성을 인터페이스로 살리기,
		                   - 무기의 데이터 저장 및 로드는 CSV로 진행(인게임에서 변하기는 하나 복잡한 구조가 아님)

11/20 :	차징 공격(우클릭) 구현

  코드 구조 개선 및 제작- IPlayerClass가 보니 몬스터와 겹치는 부분이 많아 ICreature로 변경 후 재할당
		      - CharacterAttackBase의 애니메이터를 animationController작성 후 대체 ( 향후 애니메이션 로직이 추가 될 가능성을 감안 )
		      - WeponChargeBase제작 (차징공격 기반 추상클래스, MonoBehaviour상속X 생성자로 해당 무기에 생성) WeaponManager의 데이터값들을 사용
	                  - 프레임워크용 GreatSword의 Charge클래스 생성(WeponChargeBase상속) 후 PerformChargeAttack override(대검만의 차지공격 구현)
	                  - WeaponManager에 IsChargeAttack 추가 (기본공격,강공격 구분용) 
                              - WeaponBase에 OnChargeAttackEnd(IsChargeAttack를 false시켜주는 애니메이션 이벤트)매서드 추가
                              - MeleeWeaponHandler의 GetDamage매서드에 차징어택시 다른 계산식 추가
		

11/21 : 히트스탑 구현, AttackData 추가 (어택의 타입을 정하기 위해)
	1 히트시 피격오브젝트의 움직임도 추가 단. 히트박스는 그대로일것< 애매
	2 땅을 기준으로 수평으로 이동할 것
	3 움직임의 크기는 점차 줄어들기
	4 일반공격과 차징공격 그리고 스킬상태의 공격마다 흔들림이 다를것
	5 해당 게임은 플레이어와 카메라의 거리가 어느정도 있기 때문에 카메라도 조금은 같이 흔들릴것


11/22 : 스페셜어택 구현, SpecialAttackBase 추가 (무기의 스페셜어택 컴포넌트)
	1 생성자, 실행, 파티클,사운드, 추상 매서드로 구현효과로 구성
	2 이를 상속받아 GreatSwordSpecialAttack 구현 
	3 대검은 버프로 버프증가 및 각종 데이터는 따로 스크립터블 만들어 Addresable로 할당 및 구현
	4 스킬을 한번 쓰면 로드한 메모리를 유지하며 파티클은 온오프로 관리, 이후 던전 관리 시스템시 종료때 릴리즈 예정
	 


11/24 : UIManager생성 및 PlayerClass의 스탯변수들을 Stats로 나누어 관리
	1 Stats는 플레이어의 스탯변수들을 프로퍼티로 만들어둠
	2 플레이어클래스는 이를 생성자로 받으며 해당 매개변수에 스크립터블의 변수 할당
	3 UI매니저는 이벤트기반으로 변동시 자동으로 바뀌게, 모든 변동UI는 여기서 관리


11/25 : 흩어져있던 무기 할당 및 생성 로직을 WeaponFactory와 WeaponService 스크립트를 만들어 합침,캐릭터어택베이스 리팩토링
	1 WeaponFactory는 딕셔너리로 웨폰의 이름과 컴포넌트 타입으로 관리함. 즉 무기 타입 관리 및 생성을 책임
	2 WeaponService는 선택한 무기의 관리, 이벤트 관련 처리를 책임
	3 CharacterAttackBase의 애니메이션 관련 스트링을 static readonly와 Animator.StringToHash()를 이용해 변환 후 사용
	(성능 최적화 - 한번 변환 후 사용 스트링보다 인트가 효율적, 오타 방지)

	
11/26 : 스크립터블에 무기별 게이지 색상 변수 추가, 차징게이지도 이벤트화 하여 유아이매니저에서 관리(발생은 일단 CharacterAttackBase에서 )
	1 주석 및 리전으로 스크립트 청소(PlayerClass와 WeaponManager만 진행)

11/27~ : 맵 에셋 구매 및 손맵 제작 진행중 (1-1~1-10까지 예정)

12/10 : 손맵 제작 후 펜스(이동제한 콜라이더)생성 툴 제작 - Scene에 클릭(기즈모로 표현)으로 좌표들을 이어 펜스 제작

12/19 : 제작 완료

12/20 ~ : 몬스터AI 제작중 - 현재 State패턴과 전략 패턴 그리고 BTree를 통해 몬스터들의 AI를 관리 할 예정

12/23 : 각종 전략들 생성, 현재 Basic류만 있으며 이후 특별한 케이스들도 따로 만들 수 있게 외부에서 주입. (CSV와 팩토리스크립트로 외부에서 주입)

----------------------------------------------------------------------------------------------------------------

최근 1달반

몬스터 4종류와 중간보스 1마리 제작 완료

Attack은 Basic과 Jumpt를 Skill류엔 비행체 - 직선 및 포물선 이동 그리고 폭발 효과(공간장악스킬) 제작

먼저 MonsterAI와 각종 전략 및 패턴에 적용된 MonsterClass를 인터페이스 화로 변경 > 전략 및 패턴을 보스에서도 재활용 하기 위함.

보스만의 전략 및 상태(페이즈변환,기믹,패턴(공격전략 합치기 및 미니게임), 멀티공격전략(공격전략들을 넣고 가중치에 따라 공격전략선택))류 제작

작업 함에 있어 생각보다 버그가 많이 발생하여 2월초중반에 고침. 보통의 경우 페이즈 변환시 CanAttack 등 초기화의 문제였음. (문제해결일지에 작성)


2/12 - 기존에 만들어둔 BossUI와 종유석 기믹 비쥬얼 업데이트 - BossUI는 임시, 종유석은 Particle간단히 제작(먼지와 잔돌 떨어지는 느낌) 및 역동성을 위해 흔들림 추가(Sin사용)

다음 할일 - 1챕터의 중간 보스 제작 완료 및 이제 나머지 몬스터 제작 예정 - 이때 또 다른 어택전략과 스킬도 제작 예정

문제점 - 떨어지는 종유석이 역동성이 여전히 떨어지게 느껴짐, BossUI의 디자인이 전체적으로 에셋없는 부분이 많아 부족함이 느껴짐



2/15 - BossUI에서 Gimmick관련 UI 개선 => 던전앤파이터 패턴 UI 착안


2/16 - MultiShot스킬전략 제작 => 애니메이션 이벤트에 OnSkillEffect를 원하는 타이밍에 발사하게끔 가능

	일반몬스터 제작 매뉴얼, 스킬제작매뉴얼, 전략 및 각종 Type들 단어 정리 완료

	1-6 몬스터 Ray 제작 (basic공격,multi스킬)

	다음 할일 - 1-9까지의 몬스터 제작 (약 2마리 정도) 후 1챕터의 보스 제작

2/17 - Ray, Warm(ID 6,7번) 몬스터 제작
	
	현재 투사체들이 날라갈때 좀 심심해 보여서 트레일렌더러 제작중. 추후 종유석기믹 등에 합쳐볼 예정


2/18 - Rat(ID 8번) 몬스터 제작 및 나선형 트레일렌더러 제작 완료 종유석 및 비행체에 결합 완료

	기존에 attakstate이후 여전히 공격범위 안이지만 간혈적으로 무브가 되는 현상 수정 => IDlestate와 Btree간 변환 충돌이 있었음. state는 상태효과에만 집중하도록 변경 및 애니메이션 트리거 변수가 잘못된거 수정 => Warm에서 한번 꼬임

	기존 attackstate에서 기존에 보스만들 때 문제였던 Excute부분을 지워 공격상태에서 나오지 못하는 상황 => Excute에 이즈어택킹이 끝났다면 Movestate로 변경
	
	다음 할일 - 1챕터 보스 제작 -

2/19~21 - Chapter1 보스 Alexander 기획 중간 완료 / 각 챕터 보스들만의 스크립터블과 데이터들 CSV제작 예정 

	현재 1챕터보스만 AlexanderBossData 스크립터블과 csv 제작 완료 Essence게이지 UI및 madness게이지 스크립트 작성/BossMonster를 상속하는 AlexanderBoss 제작 >> 에센스 증가 및 감소 그리고 효과를 위해 

	1-10 맵자체에 CanvasUI와 EssenceUIManager까지 넣어둔 상태. << 이부분은 차후 어떤식으로 관리 및 확장할지 고민중

	기존 BossFactory에 생성자에 bossId넣는 부분을 CrabBossFactory, AlexanderFactory로 분리 따로 관리 던전매니저도 열거형 수정 및 추가

	생성 생성 후 1-10 BossEssenceUI 연동 확인
	
	Y를 누르면 10증가 T누르면 10감소 테스트 완료

	Commit = Alexander/EssenceUI


2/22 - 1챕터 Essence 효과 - 70%도달시 플레이어 공격력30%상승 but 받피뎀 20%증가, 100%도달시 2초간 경직 후 게이지0초기화 구현 완료

	PlayerClass에 IsStuned bool타입과 AplyStun 매서드 작성 (Dotween 활용)

	PlayerMoveMent와 PlayerAttack에 해당 변수를 추적 후 스턴시엔 조작 불가능하게 수정 완료

	현재 움직임중 100퍼도달시 살짝 미끌어지며 앞으로가는데 수정하지 않고 뭔가 자연스러워서 보류

	광기게이지용 VignetteEffect Shader 제작 (화면가장자리에 붉은색 띠가 흐르는듯한 느낌) 
	
	게이지가 트리거만큼 차면 발동 현재 두근거리는 소리도 넣을지 고민중

	Commit = Alexander/EssenceUI/VignetteEffectShader


2/23 - 70%시 두근거림 추가

	영혼석 (광기게이지 감소 시켜주는 기능) 제작

	각각 영혼석은 미리 맵에 배치해두고 스크립트를 넣어 둔 뒤 보스가 소환될때(Factory) Find로 보스의 에센스시스템을 초기화 시켜주는 구조

	현재 WorldSpace로 플레이어에게 F가 상호작용 키임을 알려주는중. 또한 가까이가면 색이 변하는등 사용가능함을 인지 상호작용은 F를 꾹누르면 Bar가 차면서 시각적으로 확인 가능

	ComboAttackStrategy 전략 제작 완료 => 애니메이션에 의존(서브머신을 만들고 이어붙임 시작과 끝에 베이직과 같이 enable,disable 이벤트 주입)

	ChargeAttackStrategy 전략 제작 진행중 => 기존 ICreatureData에 차지공격전략에 필요한 데이터 추가 => 이부분은 몬스터클래스에 옮기지 않고 그냥 데이터에서 바로 뽑아 사용
		
		현재 보스에 전략 주입까지 해뒀고 플레이어나 월간 기초적인 상호작용까진 완료
	
	 개선 => 현재 공격상태에 오자마자 바로 슝 시작하기에 느낌이 없음. 뭔가 발을 구른다던지 사전시간이 필요함. 이때 기믹에서 이용한 Indicator를 확장 예정

		  => 기존껀 원형모양만 가능하기에 Squre버전 제작 예정. 참고자료 던파 진룡 이트레녹의 돌진기술 => 추후 이게 카운터 미니게임해금으로 발전 가능성 염두


2/24 - ChargingIndicator 제작 완료 제작중에 크기커질때 아웃라인도 커짐 확인 Shader수정 기존Indicator도 바꿔야할듯함 

	개선 => 현재 두께가 좀 얇고 뭔가 밋밋함 두께는 좀더 넓히고 추후 이펙트 넣고 생각


	ChargeAttackStrategy전략에서 이벤트를 만들어 사전준비에서 차징공격으로 넘어갈때 인보크 시켜 애니메이션트리거를 발동 >> 현재 AttackState에선 보스에만 적용중 몬스터도 수정해야함

	Enum으로 차징어택의 순서 정리

	애니메이션 구조는 Prepare > Charging > Idle순으로 가며 스탑어택에서 Complete하고있는데 수정 여지 있음 > 이벤트를 한번더 호출? 구독해제는 죽을때 해줘야할듯함
	
	개선 =>  이펙트가 더 있어야 좀더 맛있는 공격이 될 것 같음
			Ex) 벽에 부딪힐땐 어떤이팩트, 사람은 어떤이팩트, 카메라쉐이크, 달리기 시작할때도 이팩트(DashEffec)

	개선 완료 


차지 공격 정리:	보스가 플레이어를 향해 준비 자세를 취하며 인디케이터가 나타남 (시각적 경고)

				준비 시간이 지나면 보스가 플레이어 방향으로 빠르게 돌진

				벽이나 플레이어와 충돌 시 적절한 이펙트와 피해를 주며 공격 종료

	차지 공격 제작 매뉴얼

데이터 설정

CSV에 필요한 필드 추가: 차지 속도, 지속 시간, 준비 시간
이펙트 프리팹 Addressables 키 설정: 인디케이터, 먼지, 시작, 트레일, 충돌 이펙트


인디케이터 준비

쿼드 메시 생성 및 경고 쉐이더 적용
채움 효과 및 아웃라인 설정


전략 연결

ChargeAttackStrategy를 BossMultiAttackStrategy에 추가
필요한 이벤트 구독 설정


애니메이션 설정

"ChargePrepare"와 "Attack_Charge" 트리거 추가
상태 전환 이벤트 연결


동작 확인

준비 단계에서 플레이어 추적 및 인디케이터 표시
차지 실행 시 적절한 이펙트와 이동
충돌 처리 및 상태 전환 확인

Commit = Alexander/AttackStrategy/Charge


2/25 기존 스킬들은 한몬스터당 하나의 스킬만 가질수 있는 구조임. 이를 해결 할 방법을 몰색함

	 스킬컨피그를 제작하여 BossMuttiSkillStrategy 컨테이너 생성 후 완성된 스킬을 ID값으로 관리하려 시도 [ex) 현재 스킬구조가 스킬전략,이펙트,임팩트,무브먼트,버프종류가 있음
	 
	 이를 Config로 합쳐서 ID값을 부여하고 각 전략들을 합쳐서 하나의 스킬을 완성 => 다양한 조합이 가능해짐]
	 
	 => 작업 중간에 에디터 실행시 멈추는 에러발생 => 찾다가 좀 헤맸던 부분들이많았음

	 => 하루만 작업했기에 전날 커밋으로 돌아가서 기존 방법을 좀더 개선해서 하기로 결정

	 => Alexander/AttackStrategy/Charge버전으로 돌아감


2/26 전날 작업을 다시 시작. 

구조 -	SkillConfig 스크립트 제작 => 스킬타입 데이터 주입용

		SkillConfigManager SkillConfig에 맞는 데이터를 CSV에서 가져와 주입해줌 

		BossDataManager에선 PhaseData.CSV 에 ID값과 가중치를 작성된 값을 스크립터블에 로드 => BossMonster에 phase이니셔라이즈에 추가(가중치도 해줘야함) => BossAI에서 BossMultiSkill생성자로 생성

		=> 로드된 Id값을 통해 BossMultiSkill스크립트의 AddSkillStrategyFromConfig매서드를 통해 Id값으로 생성되어있는 스킬을 주입해줌

		이 과정에 있어서 기존에 BossMonster에서 CurrentPhase값이 1이고 시작시에 기믹데이터와 페이즈데이터에 CurrentPhase-1이 아닌 그대로 사용 했는데 문제없이되었던 문제를 해결함

		BossDatamanager에서 데이터들으 2번 Add했었음 => 시작하자마자 CurrentPhase값(1)을 그대로 받아와도 이상이 없던 이유.

		수정 후 스킬들이 들어오는것까지 확인함

		다음날 할것 => 좀더 테스트를 해봐야함. 먼저 가중치데이터도 BossMonster에 일단 추가해줄수있도록함 또한 페이즈 변환할때 잘 되는지도 체크 => 트랜지션전략에 추가해야함

Commit = Alenxader/SkillConfig/ing
		
		
2/27 - 스킬전략시스템 리팩토링 개선 => 현재 알고보니 스킬전략의 skillEffect전략(여기서 무브나 각종 전략도 추가됨)이 전략공장에서 스크립터블데이터 통해 주입됨.

		따라서 SkillStrategyFactory를 새로 만들어 BossMultiSkillStrategy에서 스킬 생성 로직을 분리하여 새로운 팩토리 클래스로 이동

		여기서 이미 구성된 스킬 ID값을 통해 스킬 전략을 생성하는 책임 부여

		BossMultiSkillStrategy: 스킬 전략 컨테이너 역할(관리, 선택, 실행)에 집중

		SkillStrategyFactory: 스킬 ID로부터 스킬 전략 객체 생성 담당 => StrategyFactory의 매서드와 config에 담긴 타입들 이용함

		StrategyFactory: 개별 전략 컴포넌트 생성 담당

Commit = SkillStrategyRefactorin/SkillStrategyFactory

2/28 = 전날 리팩토링에서 추가적으로 Boss별 skillConfigid마다 다른 프리팹 사용을 위한 개선 (ex) bossid : 1 configid : 1 prefabkey : A , bossid : 1 configid : 2 prefabkey : b)

	흐름 - BossPrefabs.csv에 SkillConfigID 추가 CSV 파일에서 데이터 로드 → BossDataManager의 딕셔너리에 저장
		   bossSkillPrefabMap이라는 이중 딕셔너리
		   키1: 보스ID, 키2: 스킬컨피그ID, 값: 프리팹 GameObject
	
		스킬 생성 시 SkillStrategyFactory가 스킬 컨피그ID와 보스 ID를 기반으로 매핑된 프리팹 요청

		BossDataManager가 적절한 프리팹 제공 (없으면 기본 프리팹 반환)

		해당 프리팹으로 ProjectileSkillEffect 생성하여 스킬 구현

		BossDataManager: 데이터 로드, 저장 및 제공
		SkillStrategyFactory: 스킬 생성 및 맞춤형 프리팹 적용
		ProjectileSkillEffect: 실제 스킬 효과 실행

		리팩토링한 스킬전략 시스템 매뉴얼

		다음 진행할 리팩토링 - 스킬에 계수를추가하여 기존 스킬데미지 하나를 이용해 다양한 데미지 구현

Commit = SkillStrategyRefactorin/SkillStrategyFactory/PrefabAdd

3/1 = 스킬계수 추가 완료 => skillConfig에 계수를 추가 csv에도 추가하여 작성 => ISkillEffect를 받은 스크립트(현잰ProjectileEffect)에서 스킬데미지를 관리

	
	기존구조는 스킬데미지를 바로받아서 할당 => 이제 skill전략팩토리에서 제작된 스킬의 계수를 받아 ISkillEffect의 Initialize해줌(기존 Initialize를 유지한채 오버로딩(데미지계수 추가))
	SkillEffect는 실제 스킬의 사실상 모든걸 담당함
	=> 현재 보스만 skillConfig로 스킬을 할당중

	기존 ProjectileParabolicMovement의 이동이 이상했는데, 이유는 skillProjectileSpeed가 높으면 너무 멀리가는게 문제임 => 바꿔야함
	

Commit = Notebook/SKillDamageDamagemutiplerAdd

3/2 = '야수의 울부짖음' 제작중 HowlPrefab 로드하는 과정에서 에디터가 계속 멈췄는데 다른 프리팹으로 하니 이상이 없어짐. 

	일단 당장 스킬발동은 하나 되는게 없는 상태 다음날 고쳐야할듯 함 => 아마 현재 스킬타입이 Basic이라 바로 끝나는거로 예상 타입 추가 예정(HowlStrategy)



3/3 = '야수의 울부짖음' 제작 완료 CSV에서 Prefab로드하는 과정에 특정 행과열에 에러가 났는데 이유는 찾지못함. 다른행으로 이동 후 작성해서 해결

	=> AreaSkillStrategy추가 구조는 스킬발동 시 먼저 Howl이펙트가 나오고 지정한 duration값동안 indicator가 Fill됨. 이후 차면 OnImpact로 효과(현잰 데미지 및 에센스 증가)
	
	=> howlDuration이 애니메이션보다 짧고 Strategy의Update가 프레임별로 안되기에 이벤트호출로 AreaStrategy완료 호출
	
	=> SkillState에서 완료 후 상태에서 나가는게 스킬효과의 충돌떄문인지 제대로 안나가짐
	
		따라서 임시 해결로 애니메이션클립을 가져와 해당 클립의 길이의 조금더를 해서 나가게끔 함

Commit = Main/Alexander/HowlSkillStrategy

3/4 = '야수의 발톱' 제작 중..

	=> BaseProjectile에서 파생되는 GroundExplosionProjectile생성 폭발형 프로젝타일에 할당 할 스크립트임
	=> ISkillEffect의 ProjectileSkillEffect를 받는 CircularProjectileSkillEffect 생성 원형에 데미지를 줄 스킬타입 스크립트

	현재 안밖으로 바뀌는지 테스트 하려했으나, 도넛모양의 인디케이터가 없어 다음날 확인해볼 예정. 일단 데미지가 들어오는거까진 확인함

	Essece게이지가 오르게도 해야함 수정 예정 GroundExplosionProjectile에서 관리할듯 함
		   

3/5 = '야수의 발톱' 제작 완료 및 도넛모양 인디케이터 제작 완료

	=> 이제 ISkillEffect에서 이벤트를 선언해 스킬의 완료를 알리도록 변경
	=> 다음으로는 기믹제작 및 미니게임 패턴(베이직차징공격예상)하면 보스는 어느정도 완성

	=> ★현재 에센스를 증가함에 있어 특정 몬스터클래스의 보스몬스터 스크립트를 갖는데, 이를 보스의 인터페이스나 이쪽으로 빼야할 듯 함★
	=> 에센스 증가는 보스들이 공유해야하기 때문

Commit = Main/Alexander/ClawSkill

3/6 = Alenxander 기믹 제작 및 맵패턴 추가/

	기존 에센스시스템에 IBossWithEssenceSystem추가해서 챕터보스에 추가 => 에센스시스템 사용하는 몬스터 추적 및 기존 시스템에서 게이지가 차게끔 하기위해

	=> 기존 스킬이펙트들중 에센스가 차는 특정 스킬을 위함
	
	맵패턴 추가 기반 다지는중

3/7 = 맵기믹 기반 및 MadnessCrackHazard 완료

	새로 추가된 컴포넌트

	인터페이스: IBossEssenceHazard(보스의 에센스 기반 위험요소를 정의, 위험요소 활성화, 비활성화, 강도 조절 메서드 제공), IBossWithEssenceSystem(에센스 시스템을 가진 보스의 표준 인터페이스 정의)

	매니저 클래스: BossEssenceHazardManager => 모노비헤비어 상속

		위험요소 관리 및 주기적 활성화
		에센스 수치에 따른 발동 빈도와 강도 조절
		플레이어 주변 적절한 위치에 위험요소 생성

	구현 클래스: MadnessCrackHazard

		"광기의 균열" 위험요소 구현체

	흐름 =>	CSV 파일에서 광기 균열 관련 설정 로드
			AlexanderBossData에 설정 적용
			보스 생성 시 IBossEssenceHazard를 상속한 클래스 new 할당 및 BossEssenceHazardManager 초기화
			광기 게이지 70% 이상 시 광기의 균열 맵 패턴 활성화
			균열에 닿은 플레이어에게 데미지 + 보스 광기 게이지 증가


3/8 = SoulEntity와 SoulGimmickStrategy 구현 완료. 

	기존 HazardObject를 상속받아 SoulEntity 기능을 구현하고, IGimmickStrategy 인터페이스 기반으로 SoulGimmickStrategy 클래스를 개발

	다음할일 - 보스 위치 이동 로직 확인 및 시각적 효과 개선(밝은/어두운 형체 구분을 위한 파티클, 이펙트 등 추가) 컷씬..추가하고싶음


3/9 = 밝은/어두운 형체를 구분하기 위한 방법으로 별도 자식 오브젝트 활성화/비활성화 방식 선택 히트임팩트도 같음

	SoulGimmickReward 클래스 설계 기존 HazardGimmickReward와 차별화된 보상 메커니즘 설계

	기믹 성공 시 컷씬 실행 => 씨네머신의 타임라인을 활용 할 예정

	움직임 제약, 컷씬 실행 트리거, 카메라 움직임, 동생의 개입 효과 필요

	=> 컷씬을 만들다보니 구도나 연출 등 오히려 몰입감이 깨지는 듯함 간단히 시네머신의 타임라인 등 사용법 숙지로 만족

3/10 = 보스제작임시완료 => 보스의 드랍아이템 제작 겸 item프레임워크 작업 돌입

3/11 = 인벤토리UI 및 Item프레임워크 기반 다짐 // Branch = Item

	=> Item클래스에 아이템 관련 변수들과 타입을 정리. ItemBase CSV로 아이템 정보들 제작 이를 ItemDataManager를 통해 로드 후 각 타입별로 아이템을 만듦. (현재는 파편,재료,물약으로 구성)

	=> 각 타입별 특수 능력들은 따로 CSV로 빼서 Creat매서드에서 부여

	=> 기존 MonsterData에 존재했던 DropChace와 DropItemID로는 하나의 아이템만 부여가 가능하여 Droptables를 제작

	=> DropTableManager와 ItemDropSystem을 통해 몬스터가 죽을때 드랍테이블로 아이템 스폰을 정함

	=> 이때 등급별 스폰 이펙트를 다르게 함으로써 유저들에게 파밍의 재미를 선사

	=> 기반은 어느정도 다져졌으며 UI 디자인 및 스폰 파티클 크기 조정, 토클 I로 인벤토리 여닫이 등 테스트 예정

	개선안 - 아이템을 먹었을때 Text나 표시가 필요 할듯 함//등급높은게 등장했을때 로스트아크의 편린같은 느낌 줄지 생각중//아이템 스폰 소리 고민

	다음날 차지공격 고칠 것 => 멀리까지날아감 => 공격발동시점에서 플레이어의 위치가 목적지

Commit = Item/framework

3/12 = 아이템획득시 알림UI 제작 현재 우측하단에 등장하게끔, 유지시간 내 같은 아이템을 또 먹으면 스택킹되게끔, 등급별로 색이 다르게 연출

	차지공격 개선 목표거리를 플레이어와 몬스터 사이로 계산해 그만큼 이동하면 멈추게끔 유도해서 멈춤 이때 안전하게 타격하기 위해 목표거리를 사이거리 +2 정도 해줌


3/13 = Villige씬 제작 기존 FlatOutline메테리얼윽 복사 GroundMat 제작. 이후 클루드와함께 값을 조절하여 반사되는 발판 생성

	=> 이후 길의 안내의 느낌을 위해 흰선 Texture를 제작해 맵위 Plane 길 배치 후 할당

	=> 일단 각종 나무와 꽃 풀 등으로 마을을 임시로 꾸며둔 상태 

	=> 추후 벽이나 더이상 나갈 수 없는곳까지 꾸며서 시각적으로 제한된곳을 알려야 할 듯 함


3/14 = 저장 및 로드 시스템 개편 및 스팀클라우드API까지 생각하여 설계

	=> 저장 시스템 주요 구성요소

		StatConstants

		모든 베이스 스탯과 업그레이드 증가량을 상수로 정의
		게임 전체에서 일관된 스탯 참조를 위한 중앙 집중식 관리


		PlayerClassData (ScriptableObject)

		플레이어 캐릭터의 스탯, 인벤토리 등 관리
		계산 메서드를 통해 실제 적용 스탯 값 제공 (베이스 + 업그레이드)
		업그레이드 카운트만 변경되고 베이스 스탯은 StatConstants로 고정


		SaveManager

		게임의 모든 저장/로드 처리
		파일이 없을 경우 스트리밍 에셋에서 복사 또는 새로 생성
		버전 변경 감지 및 데이터 마이그레이션 지원
		업그레이드 카운트만 저장하고 베이스 스탯은 상수 사용


		ISaveSystem과 JsonSaveSystem

		실제 파일 저장/로드 인터페이스 및 구현
		JSON 포맷으로 직렬화/역직렬화 수행

		PlayerSaveData

		플레이어 정보를 저장하는 클래스
		캐릭터 스탯, 인벤토리, 장착 아이템 등 포함


		ChapterProgressData

		챕터 진행상황 저장
		잠금 해제, 최고 기록, 시도 횟수 등 관리


		GameSettingsData

		게임 설정 저장 (음량, 해상도 등)

		작동 원리

		초기화 시

		저장 파일 존재 확인
		없으면 스트리밍 에셋에서 복사 또는 새로 생성
		버전 확인 및 필요시 데이터 업데이트


		스탯 계산 원리

		베이스 스탯(상수) + (업그레이드 카운트 × 증가량)
		업그레이드 카운트만 저장/로드됨
		베이스 스탯은 StatConstants에서 관리


		저장/로드 과정

		저장: 업그레이드 카운트만 저장 (베이스 스탯은 무시)
		로드: 업그레이드 카운트 적용 & 상수 값으로 스탯 계산


		자동 저장

		게임 종료 시 자동 저장
		플레이어 진행에 따라 필요 시점에 저장 (챕터 완료 등)



		특징 및 장점

		관리 용이성

		베이스 스탯을 한 곳(StatConstants)에서 관리
		밸런싱 변경이 쉬움: 상수만 수정하면 모든 플레이어에게 적용


		유연성

		업그레이드 카운트만 저장하여 진행상황 유지
		스트리밍 에셋 기반 기본 데이터 지원


		확장성

		버전 관리 기능으로 게임 업데이트 시 데이터 마이그레이션 가능
		모듈식 구조로 새로운 데이터 타입 추가 용이
	

3/16 = 저장 및 로드 임시 완료 후 Dungeon과 Village 씬을 잇는 기능 시작 (DungeonManager Branch)

	=> StageDataLoader를 Stage,StageMonsters.CSV 룰통해 각 챕터 맵별 데이터와 몬스터 스폰위치, 종류, 플레이어의 위치 저장
	=> GameManager를 제작해 일단 DungeonManager와 StageDataLoader를 초기화

	DungeonManager가 핵심기능을 수행(몬스터 스폰 및 던전 진행)

	=> 현재 문제 :	1. 씬이동시 플레이어가 원하는 위치로 가지만 순간 다시 이상한곳으로 감(임시로 Rigidbody isKine를 false 후 true로 바꾸는 식으로 해결)
					2. 씬이동시 로딩창 제작해야함 => 제작완료 Shader를 이용해 시계바늘이 돌아가는 듯한 느낌의 Material제작
					3. 이때 로딩창은 플레이어가 원하는 위치에 딱 제대로 도착 했을때 로딩이 다된판정이 되어야함
					4. 맵은 미리 오픈을 해두고 맵간의 이동은 페이드아웃을 해야함(맵이동시 몬스터가 소환되는 형태)
					5. 현재 중구난방하게 소환되는데 그냥 내가 직접 스폰포인트를 잡아서 소환해주는게 마음 편할듯 함(에디터를 통해 잡을지는 모르겠음)
					6. 현재 1-1에서 몬스터가 전부 죽으면 바로 1-2가 되는 구조기에 이는 고쳐야함(1-1 몬스터가 다 죽고 아이템이 안먹은 아이템이 없으면 포탈이 열리게끔)


3/17 = 전날 작업 문제 해결 현황

	=>	1 임시해결로 유지
		2 제작 완료
		3 DungeonManager에서 데이터 초기화를 비동기 실행을 통해 한걸 DungeonDataManager에 옮겨 초기화 SceneTransitionManager(페이드 전환 효과 및 점멸효과) ,LoadingScreen(씬 전환 로딩) 
		=> DungeonManager는 던전관련된 관리 시스템. 시작시 로드스테이지 매서드를 통해 위치로 이동
		4  해결 (맵간이동중 페이드인아웃이 두번더 발생 하는중)
		5. 해결 (SpawnPointMarker(점을 찍어 SCene에서 볼 수 있게 해주는 역할),SpawnPointContatiner(Tool로 생성 후 맵프리팹에 넣음),SpawnPointEditorWindow(에디터
								=> 마우스로 정해서 각 타입위치를 정해서 CSV로 뺌)  통해 해결) 시작시 StageDataLoader가 알아서 StageData생성
		6. 해결(해결)

	=> 현재 문제 :	1. 몬스터가 이즈트리거가 되어있어 벽을 뚫고 나가는 경우가 있음
					2. 몬스터별 테이블을 임시로라도 제작
					3. 간혹 타격이 안됨(심각)

3/18 =	1번 이동전략 수정으로 수정완료 (벽과 장애물에 레이어를 부여 후 오버랩스페어로 판별 뒤 이동방향 재조정)

	전날 확인이 안된 버그 = 빌리지에서 DungeonDataManager에 DungeonDataManager.cs만 넣고 해당에서 인스턴스로 참조해서 데이터들을 초기화 했는데,

		이때 해당 인스턴스들이 씬이동하면서 없어서 재참조되면서 데이터가 덮어씌워짐. => DungeonDataManager에 스크립트들 부여해서 해결


		2번 임시 완료
		3번 미뤄둠
		
		이제 로그라이크적 요소(DungeonAbility)제작 시작 기반은 Passive류로 제작

3/19 = 로그라이크 요소	DungeonAbility(기반클래스).DungeonAbilityManager(관리)

						PassiveAbility(패시브류),PassiveAbilityLoader(CSV로드),PassiveAbilityFactory(데이터생성)

						CounterAttack(반사),ItemFind(아이템등장확률),LifeSteal(흡혈),RemoveDamageReduction(받는피해감소) 구현

						AbilityCardUI(종류별 카드),AbilitySelectionPanel(로그라이크 요소 패널), 카드프리팹 제작 DungeonManager에 연동 완료 (몬스터 전부 처치시 등장)

						현재 카드 등장 밑 선택까진 완료. 이후 선택시 AddComponent는 되지만 실제 효과엔 다소 문제가 많음

						반사는 적용 X(이벤트기반), 아이템등장확률은 확인예정, 흡혈은 공격성공시 판정이 아닌 공격시라 수정해야함,

						받는피해감소 O


3/20 = 패시브류 효과적용 완료	CounterAttack =>	PlayerClass에서 콜라이더 판정 피격당할때 이벤트를 호출(MonsterAttackCollider에서 발생)하여 Status컴포넌트를 찾아 해당
													몬스터의 정보를 얻어와 데미지를 받아와 그걸 반사함.

								ItemFind =>		GlobalItemFindManager를 생성 => 아이템테이블에서의 값을 전해주기 위한 중간다리 역할
												패시브 획득 => 글로벌파인트매니저에서 등록 => ItemDropSystem에서 해당값을 얻어 최종 확률 계산

								LifeSteal =>	IDamageDealer에  Action<int, ICreatureStatus> OnFinalDamageCalculated이벤트 추가 무기로 데미지를 줄때 이벤트 발생
												=> LifeSteal컴포넌트가 플레이어에 붙을때 무기의 IDamageDealer컴포넌트를 찾아 겟컴포넌트해줌 => 생성한 이벤트를 체력회복매서드에 연결해줌

						Ability패널을 제작하여 선택시 보유중인 능력을 플레이어에게 시각적 제공 던전어빌리티매니저에서 이벤트를 통해 호출

						Commit = DungeonManager/Passive/AbilityPanel

3/21 = 어택류 Ability제작 ArmorCrushComponent(방깍),ChainStrikeComponent(연속공격),ComboEnhancementComponent,GaugeBoostComponent,WeakPreyComponent
							
							ArmorCrushComponent,WeakPreyComponent,ChainStrikeComponent 기존 이벤트(OnFinalDamageCalculated)를 이용해 연동

							ComboEnhancementComponent => 기존 WeaponBase에 comboDamageMultiplier(콤보의 데미지 계수),SetComboDamageMultiplier를 추가해서 제작

							GaugeBoostComponent =>기존 WeaponBase에 SetGaugeChargeMultiplier,gageChargeMultiplier(게이지 획득 계수)제작

3/22-3 = 기존 브런치 Merge 후 다시 나눔

			Move Ability 제작		=> 무브 관련해 작업 하기 전 PlayerMovement컴포넌트에 있는 Dash기능을 PlayerDashComponent을 만들어 나눔 ConstantStats에 대쉬 관련 변수도 추가해줌

					
									=> DashImpact(몸통박치기),DashFlame(대쉬시 불장판), DashInvincible(대시시 0.n초 무적),대시거리증가
									
									4개 제작

									DashFlame => [BaseAreaEffect를 상속받아 제작 (초당 데미지)]

									제작 이후 DungeonAbility추상 클래스에 레벨관련 배율 변수 추가 및 CSV들 정리 및 각 Ability 및 희귀도에 따른 Icon 배정 => 밸런싱은 추후 생각해야 할듯 함

									=> Icon에 Outline 지정 및 아웃라인을 따라 빛나는 Patrol 셰이더(shader) 제작

									이후엔 SpecialAbility까지만 제작 후 로그라이크 종류는 끝
									
									현재 너무 많아서 원하는걸 뽑기 극악인듯 함 카드의 출몰을 잘 조율해야할듯함 (종류별로 하나 뜬다던지)

3/24 = SpecialAbility제작		=>	LightningJudgmentComponent(스페셜공격시 전역에 번개), SpecialResourceRetentionComponent(스페셜공격 사용시 게이지 잔여)

									2개 제작

									LightningJudgmentComponent => DungeonManager의 현재 소환된 몬스터를 받기위해 애초에 Factory류에 Action 매개변수들을 IMonster>ICreature로 전체 변경
																  이후 생성된 몬스터를 IMonsterClass 리스트가 아닌 ICretaureStatus를 받음 => 이로써 ICretureStatus의 GetTrasform매서드를 통해
																  현재 몬스터들의 위치가 찾아짐
																  CharacterAttackBase에 GetComponent후 있으면 Execute실행

									SpecialResourceRetentionComponent => IWeapon에 SetGageRetentionRate매서드 추가 WeaponManager에 구현 및 gageRetentionRate변수 추가 및 ResetGage개선


									이제 DungeonAbility는 임시 완성
									
									이후 UI개선 및 현재 어빌리티선택에서 나오는 랜덤성이 강해 조정 필요
								

3/25 = DungeonManager.cs 중 매서드GetSmartAbilitySelection제작

먼저 시스템이 40:60 확률로 두 가지 방식 중 하나를 선택합니다:

20% 확률: 다양한 희귀도가 섞인 풀 사용 (Common부터 Legendary까지 균등하게)
80% 확률: 진행도에 따라 조정된 확률로 단일 희귀도 선택 후 해당 희귀도만으로 풀 구성

20% 확률로 레벨업 가능한 기존 능력 중 하나를 선택지에 추가합니다.
남은 선택 슬롯을 1번에서 결정된 희귀도 풀에서 선택합니다:

다양한 희귀도 풀이 선택된 경우: 풀에서 랜덤하게 희귀도 선택
단일 희귀도 풀이 선택된 경우: 모두 같은 희귀도의 능력으로 채움 												


3/26 = Material 아이템을 이용해 스탯 강화 기능 제작 => StatUpgradeManager,StatUpgradeUI,StatItemUI,UpgradeMaterials.csv 제작, 아이템테이블 조정 및 Icon추가

			StatUpgadeManager =>재료를 이용한 스탯 강화는 공격력, 헬스, 스피드를 PlayerClass와 연동해 UpgradeCount를 올려주고, 올려줄수록 Ability의 높은 희귀도 등장 확률 Up
								Max레벨이 존재하며 10단위로 티어가 오르고 이때 요구 재료도 바뀜		

			StatUpgradUI 프리팹들 제작 => 이후 UIManager를 만들어 토글되는 패널창은 ToggleCs를 추가하여 Esc누르면 닫아지게끔 함

			UpgradeMaterials => StatType	Tier	ItemID	BaseQuantity	MaxLevel 작성

			챕터 해금 기능 제작 =>	FragmentChpaterUnloacker제작 아이템ID와 챕터ID 맵핑 후 InventorySystem에 Add아이템 이벤트 추가 맵핑된 아이템을 최초 획득 시 맵핑된 챕터 개봉
									기존 BossID도 그냥 MonsterID받는거로 통일
									기존 던전입장버튼 리뉴얼 => DungeonEntryButton 해금전엔 ImageObejct True,intereactable false
																
																언락스크립트의 OnChapterUnlocked구독 => 보스파편먹으면 해금ON

			버그 수정 예정 = 대시시 Gage 초기화 버그 / 로그라이크 이미지 로드 버그(Special류가 유독)
					  개선 = 유저에게 언제든 알릴 공지사항(nofication)제작 ex) 2챕터 해금, @@무기 해금 이런식


3/27 = 버그 수정 = Gage버그는 무기장착이 중첩으로 적용되어 그런거였음 => 무기테스트버튼을 기존무기가 이미 껴져있으면 작동 못하게 변경
				   이미지 로드 버그 => 일단 사전에 0.3초딜레이를 주던걸 0.5초로 변경

			개선 = UIManager에 공지기능 추가 필요한타이밍에 Instance로 호출 현재 UI는 꾸밈없이 그냥 투명도와 글씨뿐

			기존 Unloacker개선 => add이벤트로 fragment를 인식하여 처음이면 해금이었는데 기존 이벤트인보크를 다른곳에 했음 => 올바른 곳으로 변경 후 아이템 드랍시 해금 (차후 무기까지 해금 예정)
									
									개선하면서 Fragment도 있으면 드랍하지 않게 개선 (고유아이템)
								  

			기존 InventorySystem 개선 => 보스용 추가 드랍에서 fragment관련 삭제(어짜피 최초 처치시 100퍼드랍임) 

										 SaveData에 fragment리스트 안에 넣어주지 않고 있어서 InventorySystem에 아이템 획득시 파편이면 넣어주고 fragmentmanager도 적용시킴

										 저장 흐름 => FragmentManager에 fragmentitem list가 존재 해당 리스트를 SaveManager에서 Get해와서 Gameinit에서 게임종료시 저장

										 

			버그 수정 예정 = 1_10 이후 =>	빌리지갈때 젠되는 위치 => 임시로라도 지정
											보스방 전 포탈은 빨갛게 변경
											보스에센스 임시로0.25로해 둔거 0으로 변경
											보스처치 후 빌리지로 오는 포탈 제작 및 현재 5초뒤 무조건 빌리지가 너무 짧음 30초로 연장 및 UI표시
											
									

							Dungeon관련 =>  스테이지 넘어갈때 페이드아웃이 2번됨

			기능 추가 예정 =	프래그먼트 획득시 컨텐츠 해금

								던전 시작시 시간 체크 시작 및 최고기록 스테이지 기록, 도전 횟수 저장 및 기록변경 (어느정도 구성되어있음) 기록류만 표기 도전 횟수는 스팀 업적 대비

								처치한 몬스터 기록 및 저장 => 스팀 업적 대비



3/29 = 하데스 프로젝트 : 시간 장치 시스템 구현 (3/30) => 프래그먼트 획득 시 해금되는 컨텐츠 //PlayerData에서 VillageManager를 통해 최초 Fragment(1001)을 찾아서 활성화

시간 장치 시스템 기반 구축:

TemporalDeviceManager, DeviceVisualController 스크립트 구현
장치 데이터 관리를 위한 CSV 파일 설정
장치 해금 상태 저장을 위한 PlayerSaveData에 unlockedDevices 필드 추가
SaveManager에 장치 저장/로드 메서드 추가


운명의 진자 (ID 0) 구현 완료:

로그라이크 능력 선택 시 레어 이상 등급 등장 확률 15% 증가 효과
DungeonAbilityManager와 연동하여 GetSmartAbilitySelection 메서드에 효과 적용
시각적 피드백 및 UI 추가


가능성의 거울 (ID 1) 구현 완료:

로그라이크 능력 선택 시 선택지가 3개에서 4개로 증가하는 효과
DungeonAbilityManager의 abilitiesPerSelection 변수 조정
복수 카드 UI 레이아웃 수정으로 4개 카드 표시 지원


풍요의 모래시계 (ID 2) 구현:

방 클리어 시 10% 확률로 추가 시간 조각(5-10개) 획득 효과
던전 매니저에 TryGenerateExtraReward 메서드 추가
능력 선택 완료 후 추가 보상 확률 체크 및 적용


초기화 순서 문제 해결:

TemporalDeviceManager의 초기화 로직을 Awake에서 Start로 이동
InitializeDevices를 Start에서 호출하여 다른 매니저들의 초기화 보장
장치 효과가 게임 재시작 후에도 정상적으로 적용되도록 개선
								

3/30 = 시간 장치 시스템 구현 완료
시간 장치 NPC 및 UI 구현:

마을에 시간 장치 관리인 NPC 설치, 상호작용 시 F키를 눌러 시간 장치 UI 오픈하는 방식 구현
SimpleTemporalDeviceUI 스크립트 제작 - 장치 목록, 상세 정보 패널, 해금 버튼 등으로 구성
DeviceButton을 통한 장치 선택 및 정보 표시 기능 추가
그리드 레이아웃을 활용한 장치 패널 구현으로 여러 장치를 한 화면에 효과적으로 표시

해금 효과 애니메이션 개선:

UnlockEffect 스크립트 구현 - 룬 이미지가 불타오르며 사라지고 장치 아이콘이 나타나는 연출 추가
UIGlowShader 셰이더 제작 - 외부 텍스처 없이도 불타오르는 효과를 생성 (dissolve)
회전, 발광, 디졸브 효과를 통해 시각적으로 만족스러운 해금 경험 제공
타이밍 조정을 통해 룬과 아이콘의 자연스러운 전환 구현

연동 시스템 개선:

TemporalDeviceManager와 SimpleTemporalDeviceUI 간 효율적인 연동 구조 설계
장치 해금 상태가 변경될 때 이벤트 기반으로 UI 자동 업데이트
해금된 장치 개수/총 장치 개수 표시 기능 추가
장치 해금에 필요한 시간 조각 부족 시 버튼 비활성화 및 안내 텍스트 표시

장치 효과 연동 완료:

DungeonAbilityManager의 GetSmartAbilitySelection 메서드에 레어 확률 증가 효과 연동
로그라이크 능력 선택 시 선택지 4개로 증가 효과 연동
방 클리어 시 추가 시간 조각 획득 확률 연동

저장 시스템 연동:

PlayerSaveData에 unlockedDevices 필드 추가
SaveManager를 통해 장치 해금 상태 저장/로드 기능 구현
게임 재시작 후에도 장치 효과가 유지되도록 초기화 순서 조정

향후 업데이트 방향:

추가 시간 장치 타입 설계 및 구현
희귀 장치를 위한 특별한 해금 조건 추가
다양한 해금 효과 애니메이션 및 사운드 확장
장치 간 시너지 효과 시스템 구축 고려


다음 할 일 :	UI들 정리 및 시간장치 오브젝트,Icon 제작

				다이얼로그시스템 구축 및 게임 전체 흐름 잡기


3/31 UI 정리 및 시간장치(별자리화) 제작 완료 Icon은 오브젝트의 문자를 Sprite화해서 사용 예정

	=> 각종 싱글턴을 남발한 부분들 수정이 필요함 (Scene넘어갈때 Missing) 현재 DungeonManager, TemporalManager 수정 완료

	Village씬에서 플레이어 최초스폰 고정 완료 (플레이어프랩스 활용) 

4/1 다이얼로그시스템 및 텍스트 Json 화 (1~2챕터까지)

	Lobby GUI 제작 및 슬롯Save작업 진행중

4/2 

세이브 슬롯 시스템 구현
작업 개요

단일 세이브 → 3개 세이브 슬롯 시스템으로 확장
플레이어가 여러 게임 데이터를 관리할 수 있도록 개선

핵심 구현 내용

인터페이스 확장

ISaveSystem에 슬롯 관리 메서드 추가 (SetCurrentSlot, GetCurrentSlot 등)


파일 시스템 변경

슬롯별 디렉토리 구조: SaveFiles/Slot{N}/
JsonSaveSystem 클래스 수정으로 슬롯별 독립 저장 지원

SaveManager 개선

슬롯 메타데이터 관리
플레이 타임 추적 기능
로비에서 불필요한 파일 생성 방지

UI 시스템

SaveSlotUIManager 클래스 개발
로드/새 게임 모드 구현
슬롯별 정보 표시 (챕터, 저장 시간, 플레이 타임)

해결한 문제

자동 폴더 생성 이슈
Null 참조 예외 처리
컴포넌트 간 초기화 순서 충돌

향후 개선 가능 사항

스크린샷 기능 추가
자동 저장 간격 조정
세이브 데이터 관리 기능 확장
UI 시각적 개선

4/3

메타데이터 관리 기능 구현 (저장 시간, 플레이 타임 등)
컬렉션 수정 예외 해결을 위한 리스트 복사본 패턴 적용

문제 해결

Json 직렬화 문제 해결 (SlotMetadataWrapper 클래스 추가)
로비에서 불필요한 파일 생성 방지
씬 전환 시 데이터 일관성 유지 로직 개선


4/4

다이얼로그 시스템 구현

다이얼로그 시스템 구조 설계

GameProgressManager 클래스 구현 => 다이얼로그 상태 및 플래그 관리
ContextualDialogTrigger 클래스 구현 => 상황별 다이얼로그 트리거 설정
PlayerSaveData에 shownDialogs, gameFlags, locationVisits 필드 추가


다이얼로그 JSON 파일 로드 구조 제작

StreamingAssets 폴더에서 dialogs.json 파일을 로드하도록 설정
다이얼로그 로드 시 플랫폼 별 처리 로직 구현 (특히 Android, WebGL 등 특수 플랫폼 고려)
다이얼로그 시퀀스 래퍼 클래스 구현으로 JSON 파싱 안정성 향상


게임 시작 시 인트로 다이얼로그 연동

GameStartManager 클래스 구현 => 게임 시작 및 세이브 슬롯 처리
첫 번째 챕터 시작 시 자동 인트로 다이얼로그 표시 기능 구현
플레이어 이동 제한 설정 추가 (다이얼로그 중 움직임 제어)


상호작용 및 시각 효과 개선

대화 중 UI 하이라이트 효과 구현 (버튼, 키 등)
애니메이션 타이밍 조정으로 자연스러운 텍스트 타이핑 효과 구현
대화 시작/종료 시 페이드 효과 추가


통합 테스트 및 버그 수정

SaveSlotUIManager와 연동하여 세이브 슬롯별 다이얼로그 진행도 저장 확인
다이얼로그 중복 표시 문제 해결 (게임 재시작 시)
게임 중 이벤트 핸들링 개선 (StartGameplay 이벤트 연동)


4/5 마을용 더미 허수아비 제작 완성(IDamageable활용) 및 무기 착용 구현, combat_tutorial까지 연동


	버그 : 현재 무기착용,전투 튜토가 다시 접속해도 등장하며, 비쥬얼표시도 등장함

	이어야하는 다이얼로그 = 첫로그라이크기능, 첫죽음, N번도전시 해금(현재 3번정도 죽으면 강화해금 예정), 첫 보스 조우

4/6 

버그 수정 => 게임프로그레스매니저에서 체크구문(Shown) 하나 추가

4/7

튜토리얼 다이얼로그 체계 개선

DialogSystem과 ContextualDialogTrigger 간의 작동 방식 점검
다이얼로그 표시 여부가 저장되도록 GameProgressManager 활용
이미 표시된 다이얼로그는 다시 표시되지 않도록 로직 수정


시각적 가이드 시스템 추가

플레이어에게 이동 방향과 상호작용 가능한 오브젝트를 표시할 ObjectiveMarker 구현
다이얼로그 이벤트에 따라 화살표 등 안내 표시가 자동으로 나타나도록 연결


사망 시스템 구현

DeathHandler 클래스 추가로 사망 처리 로직 통합
사망 횟수 저장 및 횟수별 다른 다이얼로그 표시 기능 구현
마을 귀환 시 로딩 화면 자연스럽게 연결


무기 해제 시스템 개선

사망 후 마을 귀환 시 무기 자동 해제 기능 구현
UnequipCurrentWeapon 메서드의 안정성 향상
무기 해제 시 애니메이션 컨트롤러가 기본으로 되돌아가도록 수정
IDamageDealer 인터페이스 구현 객체 정리 로직 추가


버그 수정

다이얼로그 반복 표시 문제 해결
무기 해제 시 간헐적 실패 원인 파악 및 개선
로딩 화면과 다이얼로그 타이밍 조정

버그

컴뱃튜토리얼 비쥬얼이 리스트에서 검색해서 있으면 끄는 형식인데 적용이안됨

3번이상 죽음시 나오는 다이얼로그가 랜덤하게 하나만 나와야하는데 여러개나옴

다음 다이얼로그

챕터 최초 접근 및 챕터1보스 최초 조우



4/8

다이얼로그 시스템 개선 

대화 화자별 색상 시스템 구현
주요 캐릭터(타임키퍼, 수호자, 알렉산더)에 각각 다른 색상 할당
SpeakerType 열거형 및 SpeakerData 클래스 추가
코드 가독성을 위해 리전(#region) 적용하여 구조 정리

시네마틱 카메라 컨트롤러 제작

다이얼로그 이벤트와 연동되는 카메라 효과 컨트롤러 구현
"FocusCamera" 이벤트로 지정된 오브젝트로 카메라 이동 및 회전
DOTween 패스 시스템을 활용한 부드러운 카메라 전환 효과
카메라 쉐이크 기능과 SceneTransitionManager 연동

작업 결과

대화 가시성 향상으로 게임 몰입도 개선
다이얼로그와 연계된 시네마틱 연출 기능 추가
코드 재사용성과 확장성 향상

다음 고칠 버그

마을 combat 비쥬얼 안꺼짐, 여러번죽었을때 멘트가 lines에 있는거 다나옴, 돌아왔을때 무기가 제대로 안지워짐


4/9

사망 시스템 구조 개선

PlayerClass.Die() 단순화하여 사망만 처리하도록 변경
DeathHandler는 카운트 증가와 마을 전환만 담당
VillageManager에서 마을 입장 후 초기화 처리(던전>빌리지)


GreatSword 컴포넌트 제거 안되는 버그 수정

UnequipCurrentWeapon 비동기 처리로 변경
WeaponBase 및 GreatSword 컴포넌트 명시적 검색/제거 로직 추가
CharacterAttackBase에 UnequipWeapon 메서드 추가


many_deaths 다이얼로그 개선

4회 이상 사망 시 many_deaths에서 한 줄만 랜덤 선택하도록 변경
사용한 대사는 재사용 방지
TryGetDialogSequence, RegisterCustomDialog 메서드 추가


무기 장착/해제 시 UI 갱신 개선

게이지 바, 차지 UI 초기화 로직 강화



다음 작업: 무기 하나 제작

4/11
시간의 분할자(Chronofracture) 쌍검 구현

과거(파란색)와 미래(빨간색)를 상징하는 쌍검 시스템 완성
시간 잔상 및 시간 메아리 효과 구현으로 고유 메커니즘 추가
양손 검 콜라이더 각각 제어를 위한 애니메이션 이벤트 메서드 구현
동일 몬스터의 중복 히트박스 처리 방지 로직 추가

차지 공격 "시간의 단절" 구현

차지 비율 50% 이상일 때만 발동하도록 밸런스 조정
플레이어 시점 방향으로 보라색 검기 발사 구현
경로상 적에게 데미지 및 시간 메아리 1스택 적용
차지 비율에 따른 데미지 및 거리 스케일링 구현

특수 공격 "시간 융합 타격" 구현

전방 120도 콘 형태의 범위 공격 시스템 구현
범위 내 적 수에 비례한 데미지 스케일링 (최대 4배)
즉시 시간 메아리 3스택 적용 기능 구현
중복 히트박스 처리 방지를 위한 HashSet 활용

시스템 통합 및 버그 수정

UI 시스템과 무기 타입 연동 문제 해결
애니메이션 이벤트 시스템과 공격 로직 동기화
기존 복제체 코드와의 충돌 해결을 위한 리팩토링
파티클 시스템 오류 수정




4/14 


던전에서 알렉산더(챕터1 보스) 처치 후 다이얼로그 이벤트를 활용해 무기 해금 알림 표시
DungeonManager에서 다이얼로그 이벤트 리스너를 추가하여 "UnlockChronofactuerWeapon" 이벤트를 감지
이벤트 감지 시 "weapon_unlocked_chronofactuer" 플래그를 GameProgressManager를 통해 설정
UIManager를 사용해 금색 알림으로 무기 해금을 플레이어에게 통지
VillageManager에서 플래그를 확인해 크로노팩처 무기를 마을에서 활성화


수정할 버그 -	1. 첫 보스처치 이후 다이얼로그 이벤트에서 카메라의 위치 만들기 => 이벤트를 없애서 해결 => 딱히 필요없어보임 (사라지는 이펙트로 대체)
				2. 다이얼로그 끝나고 너무 빠르게 퇴장됨 => 파편을 못먹을 위험이있으니 버튼을 제작하든 여유를줘야함
				3. n회타격 이후 간혹 간혈적으로 타격이 되지 않을때를 찾아야함
				4. 플레이어와 지면 사이 떠있는 부분 수정 => convex 꺼서 수정
				5. 1_10 보스에센스UI에 Madness부분 수정 => csv 수정완료

추가 작업 할 사항 -	1. 무기 챕터 해금 후 다이얼로그 연동 및 별자리 컨텐츠 해금 연동
					2. 챕터 내 던전 나가기 버튼(마을 귀환)
					3. 밸런스
					4. 2챕터 입장 막아두기 - 버튼컴포넌트 빼서 눌러도 반응X, 업데이트 예정 문구 적어둠
					5. 보스 포물선스킬 몬스터와 충돌 x시키기 - 발사체르 레이어 수정으로 해결(기존에 물리무시로 되어있음)
					6. 보스소환자리 재조정(현재 너무 아래)
					7. 챕터별 최고기록 및 시도횟수 - 적용완료 


4/15	버그 진행 상황	-	1,2,4,5 어느정도 수정
		추가			-	1. 챕터1보스 처치 후 시간의 절단자 노티피케이션 2회 알림 => 이벤트 2번 발생으로 해결완료
							2. 챕터 1보스 러브샷시 처리 
							
		
		작업 진행 상황	-	1,2 작업중 수정안 => 현재 마을돌아감에 있어 '상태'를 저장해줘야함 (클리어,죽음,중도포기) => Prebs로 죽어서 온건지 안온건지 구분(0,1)으로 해결완료


4/16 추가 버그 완료 

	수정할 버그 1. n회타격 이후 간혹 간혈적으로 타격이 되지 않을때를 찾아야함
				2. 씬로드 될때 렉걸림 해결 고민

	추가 작업 할 사항 - 밸런스
						보스소환자리 재조정

4/17 수정할 버그		1. 세이브슬롯 플레이타임이 간혹 초기화되거나 공유하는 버그
						

4/18 -	damageText의 TMP 셰이더를 복사/수정해 Zwrite always해 항상 텍스트 표기가 몬스터 위에 등장하게끔 수정
		
		몬스터의 Dissolve셰이더 생성 및 디졸브컨트롤러를 통해 죽었을때(dieStateagy) 발생시킴 (엘리트몬스터는의 아웃라인 메테리얼때문에 죽었을때 한번더 발생)
		
		DieState를 CreatureAI의 Ondamage매서드에서 체력을 추적해 DieState상태에 들어가게끔 설정

	작업 할 사항 - 


		

'				
				
				